---
title: "Exploratory - clustering - Stamp 2 - MIX"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 16     
  fig-height: 12 
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(glue)
library(qs)
library(BiocParallel)
library(BiocNeighbors)
library(BiocSingular)
library(data.table)
library(spatstat)
library(InSituType)
})
```

### Data loading

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

```{r}
stamp <- "stamp_2"
sample <- "MIX"
dir <- glue("{here()}")

res_dir <- glue("{proj_dir}/data/{stamp}/processed/{sample}")
sce <- qread(glue("{res_dir}/PreProcNew.qs"), nthreads = 8)
#sce <- sce[,sample(colnames(sce),1000)]
sce 
```

```{r}
dir <- glue("{proj_dir}/data/{stamp}/{sample}/Ist")
dir.create(dir, showWarnings = F, recursive = T)
unsup <- qread(glue("{dir}/unsup.qs"))
```


```{r}
sce$label <- unsup$clust[colnames(sce)]
sce$label_prob <- unsup$prob[colnames(sce)]

sce$label[sce$label == "a"] <- "LnCAP"
sce$label[sce$label == "b"] <- "MCF7"
sce$label[sce$label == "c"] <- "SKBR3"

pal <- Polychrome::createPalette(26,c("#99FFFF", "#FF99FF", "#FFFF99"))
names(pal) <- unique(sce$label)
```

## Remove cells with transfer prob < 0.8
```{r}
sce <- sce[, sce$label_prob > 0.8]
```

## Cell numbers

```{r}
df <- as.data.frame(table(sce$fov,sce$label)) %>%
  group_by(Var1) %>%
  mutate(Proportion = round((Freq / sum(Freq)) * 100, 2))

gg_cnumb <- ggplot(df, aes(x = Var1, y = Proportion)) + 
  geom_col(aes(fill = Var2), alpha = 0.9) +
  scale_fill_manual(values = pal) +
  theme_bw() +
  theme(text = element_text(size = 20, color = "black"),
        axis.text = element_text(size = 16, color = "black"),
        legend.position = "none",
        panel.grid = element_blank()) +
  labs(fill = "Sample", y = "Proportion") +
  labs(x = "FOV", fill = "Cluster") +
  scale_x_discrete(
    breaks = c("1", "10", "20", "30", "40", "50", "60", "70", "80", "90", "97"),
    labels = c("1", "10", "20", "30", "40", "50", "60", "70", "80", "90", "97")) +
  coord_flip()

pdf("/Users/emanuelepitino/Desktop/fig1/prop.pdf", width = 3, height = 8)
gg_cnumb
dev.off()
```

## Space
```{r}
df <- as.data.frame(colData(sce))
df <- df[sample(rownames(df)),]

gg_space <-  ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = label)) + 
  scale_color_manual(values = pal) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) +
  labs(x = "x_px", y = "y_px") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
   coord_equal() +
   labs(color = "Cluster")

gg_space
```

```{r}
 ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = label_prob)) + 
 # scale_color_manual(values = pal) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  scale_color_gradientn(colors = c(low = "navy", high = "red4")) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) +
  labs(x = "x_px", y = "y_px") +
   coord_equal() +
   labs(color = "Cluster")
```

```{r}
df <- as.data.frame(colData(sce))
ppp_mix_square <- ppp(x = df$CenterX_global_px, 
                  y = df$CenterY_global_px, 
                  window = owin(c(min(df$CenterX_global_px), max(df$CenterX_global_px)), 
                                c(min(df$CenterY_global_px), max(df$CenterY_global_px))))

# Perform a quadrat test to assess spatial randomness
quadrat_test <- quadrat.test(ppp_mix_square, method="Chisq", nsim = 99)

# Calculate the density of the ppp object
density_obj <- density(ppp_mix_square)

density_df <- as.data.frame(as.table(as.matrix(density_obj)))

library(viridis) 
ggplot(density_df, aes(x = Var2, y = Var1, fill = Freq)) +
  geom_raster() +
  scale_fill_viridis_c(option = "magma") +
  coord_fixed() +
  labs(
    title = "Density of cells distribution",
    subtitle = glue("Chisq quadrat test: {format(quadrat_test$p.value, digits = 2, scientific = TRUE)}"),
    x = "X Coordinate",
    y = "Y Coordinate",
    fill = "Density"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_blank(),  
    axis.text.y = element_blank(), 
    axis.ticks = element_blank()
  )

```

## FlightPath
```{r}
fp_layout <- flightpath_layout(logliks = unsup$logliks, profiles = unsup$profiles)

# Replace values in clustpos dimnames
fp_layout$clustpos <- setNames(fp_layout$clustpos, c("LnCAP", "MCF7", "SKBR3"))

# Replace values in clust
fp_layout$clust <- gsub("a", "LnCAP", fp_layout$clust)
fp_layout$clust <- gsub("b", "MCF7", fp_layout$clust)
fp_layout$clust <- gsub("c", "SKBR3", fp_layout$clust)

# Replace names in meanconfidence
names(fp_layout$meanconfidence) <- c("LnCAP", "MCF7", "SKBR3")

gg_fp <- ggplot(fp_layout$cellpos, aes(x = x, y = y, color = fp_layout$clust)) +
  ggrastr::rasterise(geom_point(size = 0.5, shape = 16), dpi = 800) +
  scale_color_manual(values = pal) +
  theme_bw() +
    theme(text = element_text(size = 15, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          panel.grid = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color = "Cluster", title = glue("FlightPath - {stamp} - {sample}")) +
  guides(color = guide_legend(override.aes = list(size = 4))) 

gg_fp
```


## InSituType Profiles

Normalize & log-transform the profiles
```{r}
norm <- unsup$profiles /  Matrix::colSums(unsup$profiles) # normalize
norm <- norm + 1e-6
```

Calculate logFC

```{r}
result <- norm 
for (i in 1:nrow(norm)) {
  for (j in 1:ncol(norm)) {
    result[i, j] <- log2(norm[i, j] / mean(norm[i, -j]))
  }
}
```

Take first 10 features for each cluster by logFC

```{r}
feat <- unique(as.vector(unlist(apply(result, 2, function(column) {
  names(sort(column, decreasing = TRUE))[1:10]
}))))
```

Remove outliers at 2.5 sd for better visualization

```{r}
x <- result[feat,]

z <- \(x, th=2.5) {
    if (is.null(dim(x))) {
        x[x < 0] <- 0
        sd <- sd(x, na.rm=TRUE)
        x <- x-mean(x, na.rm=TRUE)
        if (sd != 0) x <- x/sd
    } else {
        mus <- colMeans(x)
        sds <- colSds(x)
        x <- sweep(x, 2, mus, `-`)
        x <- sweep(x, 2, sds, `/`)
    }
    x[x > +th] <- +th
    x[x < -th] <- -th
    return(x)
}
mtx_scaled <- z(x)
```

Plot
```{r}
# Perform hierarchical clustering on euclidean distance matrix with "average" method
column_dist_euclidean <- dist(mtx_scaled, method = "euclidean")
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")
colnames(mtx_scaled) <- c("LnCAP", "MCF7", "SKBR3")

library(reshape2)
library(ggdendro)
colnames(mtx_scaled) <- c("LnCAP", "MCF-7", "SK-BR-3")

# Perform hierarchical clustering on columns
column_dist_euclidean <- dist(t(mtx_scaled), method = "euclidean")  # Use transpose to cluster columns
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")

# Reorder the columns based on clustering
ordered_columns <- column_hclust_complete$order
mtx_scaled_ordered <- mtx_scaled[, ordered_columns]
colnames(mtx_scaled_ordered) <- colnames(mtx_scaled)[ordered_columns]

# Convert the matrix into a format suitable for ggplot
mtx_melted <- melt(t(mtx_scaled_ordered))
mtx_melted$Var1 <- factor(mtx_melted$Var1, levels = c("SK-BR-3", "MCF-7", "LnCAP"))
# Create the heatmap using ggplot2
hm <- ggplot(mtx_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "navy", mid = "white", high = "red",
                       midpoint = 0, name = "log2FC avg. expr.") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 15, color = "black"),
    axis.text.y = element_text(size = 16, color = "black"),
    axis.title = element_blank(),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.grid = element_blank()
  ) +
  labs(x = "", y = "") +
coord_flip()

pdf("/Users/emanuelepitino/Desktop/fig1/hm.pdf", height = 2.5, width = 12)
hm
dev.off()

```

```{r}
df <- as.data.frame(colData(sce))
um <- as.data.frame(reducedDim(sce,"UMAP"))
df <- cbind(df,um)

gg_um <- ggplot(df, aes(x = V1, y = V2, color = label)) +
 ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  labs(x = "UMAP1", y = "UMAP2", color = "Cluster") +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid = element_blank()) +
  guides(color = guide_legend(override.aes = list(size = 3)))

gg_um
```


```{r}
pdf(glue("{proj_dir}/figures/fig1/raw/cnumb.pdf"), width = 5, height = 12)
gg_cnumb
dev.off()

saveRDS(gg_cnumb, glue("{proj_dir}/figures/fig1/rds/cnumb.rds"))

pdf(glue("{plt_dir}/{stamp}/{sample}/b.pdf"))
gg_fp
dev.off()

pdf(glue("{plt_dir}/{stamp}/{sample}/c.pdf"))
gg_space
dev.off()

pdf(glue("{proj_dir}/figures/fig1/raw/um.pdf"))
gg_um
dev.off()

saveRDS(gg_um, glue("{proj_dir}/figures/fig1/rds/um.rds"))


pdf(glue("{proj_dir}/figures/fig1/raw/hm.pdf"), width = 10, height = 4)
hm
dev.off()

saveRDS(hm, glue("{proj_dir}/figures/fig1/rds/hm.rds"))

```

```{r}
dir <- glue("{proj_dir}/data/{stamp}/{sample}/Ist")
qsave(sce, file = glue("{dir}/anno_sce.qs"), nthreads = 8)

dir <- glue("{proj_dir}/data/{stamp}/processed/final/")
dir.create(dir, showWarnings = F)
qsave(sce,glue("{dir}/sce_{sample}.qs"), nthreads = 8)
```

```{r}
sessionInfo()
```
