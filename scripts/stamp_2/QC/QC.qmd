---
title: "QC - stamp2 - `r params$sample`"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
params:
  sample: !expr NA
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
---

## Libraries
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(scuttle)
library(data.table)
library(glue)
library(qs)
library(scales)
library(tidyr)
})
```

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))

sample <- params$sample
sample <- "MIX"
stamp <- "stamp_2"
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

## Load data

```{r}
sce <- qread(glue("{proj_dir}/data/stamp_2/raw/raw_proc/layout_sce.qs"), nthreads = 8)
sce <- sce[,sce$sample == sample]
```
## Calculate qc metrics

```{r}
sce <- addPerCellQCMetrics(sce)
sce
```

### Find outliers

```{r}
# Sum outliers
discard_sum <- isOutlier(sce$sum, 
                         type = "both", 
                         log = TRUE,
                         nmads = 2.5)
# Detected outliers
discard_detected <- isOutlier(sce$detected, 
                         type = "both", 
                         log = TRUE,
                         nmads = 2.5)
# Detected outliers
discard_area <- isOutlier(sce$Area.um2, 
                         type = "higher", 
                         log = T,
                         nmads = 2.5)
```

```{r}
extr_thr <- function(df){
return <- list()
lower <- round(attr(df, 'thresholds')['lower'],0)
higher <- round(attr(df, 'thresholds')['higher'],0)
return(c(lower,higher))
}
```

```{r}
cd <- as.data.frame(colData(sce))

qcmet_hist <- \(var,isOut_df,xmin,xmax){
# var
mean <- round(median(cd[[var]]),0)

thr <- extr_thr(isOut_df)

if(var == "sum") {xlab = "nCount"}
if(var == "detected") {xlab = "nFeature"}
if(var == "Area.um2") {xlab = "Cell area (um2)"}

ggplot(cd, aes(x = !!sym(var))) +
    geom_histogram(fill = "lightgrey", color = "black", bins = 20, alpha = 0.5) +
  theme_bw() +
  scale_x_continuous(limits = c(xmin,xmax)) +
  geom_vline(xintercept = mean, color = "red", size = 1.5) +
  geom_vline(xintercept = thr[[1]], color = "red",linetype = "dashed", size = 1) +
  geom_vline(xintercept = thr[[2]], color = "red",linetype = "dashed", size = 1) +
  labs(y = "# cells", x = xlab, subtitle = mean) +
  theme(panel.grid = element_blank(), 
        text = element_text(size = 20, color = "black"),
        axis.text = element_text(size = 16, color = "black"),
        plot.subtitle = element_text(size = 16,color = "red")) +
    scale_y_continuous(breaks = c(0, 2000,6000,10000)) 
}

pdf("/Users/emanuelepitino/Desktop/fig1/qc_hist.pdf", height = 7, width = 4)
wrap_plots(
  qcmet_hist("sum",discard_sum,0,13000),
  qcmet_hist("detected",discard_detected,0,1000),
  qcmet_hist("Area.um2",discard_area,0,1000),
  ncol = 1) +
  plot_layout(axis_titles = "collect")
dev.off()

```

# Filter

```{r}
filt <- sce[,sce$sum > as.numeric(attr(discard_sum, "threshold")["lower"]) &
             sce$sum < as.numeric(attr(discard_sum, "threshold")["higher"]) &
             sce$detected > as.numeric(attr(discard_detected, "threshold")["lower"]) &
             sce$detected < as.numeric(attr(discard_detected, "threshold")["higher"]) &
             sce$Area.um2 < as.numeric(attr(discard_area, "threshold")["higher"])]
```


# Border effect
```{r}
sce <- filt
md <- as.data.frame(colData(sce))
```

```{r}
right <- md %>%
        group_by(fov) %>%
        mutate(d_border_px = max(CenterX_local_px) - CenterX_local_px) %>% 
        filter(d_border_px < 500) %>%
        ungroup() %>%
        mutate(fov_cell = paste0(fov, "_", cell_id))

left <- md %>%
        group_by(fov) %>%
        mutate(d_border_px = abs(min(CenterX_local_px) - CenterX_local_px)) %>% 
        filter(d_border_px < 500) %>%
        ungroup()%>%
        mutate(fov_cell = paste0(fov, "_", cell_id))

top <- md %>%
        group_by(fov) %>%
        mutate(d_border_px = abs(max(CenterY_local_px) - CenterY_local_px)) %>% 
        filter(d_border_px < 500) %>%
        ungroup()%>%
        mutate(fov_cell = paste0(fov, "_", cell_id))

bottom <- md %>%
        group_by(fov) %>%
        mutate(d_border_px = abs(min(CenterY_local_px) - CenterY_local_px)) %>% 
        filter(d_border_px < 500) %>%
        ungroup()%>%
        mutate(fov_cell = paste0(fov, "_", cell_id))
```

```{r}
plot_d_border <- function(df, title, thr) {
  # Number of bins
  num_bins <- 500
  
  # Create bins based on d_border_px
  bins <- cut(df$d_border_px, breaks = num_bins, labels = FALSE)
  
  # Calculate means within each bin
  bin_means <- aggregate(df$nCount_RNA, by = list(bin = bins), FUN = mean)
  bin_centers <- aggregate(df$d_border_px, by = list(bin = bins), FUN = mean)
  
  # Combine bin means and centers into a single data frame
  bin_data <- data.frame(bin_centers = bin_centers$x, bin_means = bin_means$x)
  
  # Create the plot
  p <- ggplot(df, aes(x = d_border_px, y = nCount_RNA)) +
    #geom_point(color = "lightblue", shape = 16, size = 0.1) +
    geom_line(data = bin_data, aes(x = bin_centers, y = bin_means), color = "black", size = 0.1) +
    geom_hline(yintercept = mean(df$nCount_RNA), color = "red") +
    geom_vline(xintercept = thr, color = "red", linetype = "dashed") +
    labs(
      subtitle = title,
      x = "distance from FOV border (px)",
      y = "nCount"
    ) +
    theme_bw() +
    scale_y_continuous(breaks = c(2000, 4000, 6000)) + 
    scale_x_continuous(breaks = c(0, 100, 300,500)) + 
    theme(
      text = element_text(size = 20, color = "black"),
      axis.text = element_text(size = 16, color = "black"),
      plot.subtitle = element_text(size = 16,color = "black"),
      panel.grid = element_blank())
  # Return the plot object
  return(p)
}
```

```{r}
wh(20,10)
par(mfrow = c(2, 2))
a <-plot_d_border(left[left$d_border_px <500,], "i) left", 25)
b <- plot_d_border(right[right$d_border_px <500,],"ii) right", 25)
c <- plot_d_border(bottom[bottom$d_border_px <500,], "iii) bottom", 25)
d <- plot_d_border(top[top$d_border_px <500,], "iv) top", 25)
```

```{r}
gg_border_effect <- wrap_plots(a,b,c,d, ncol = 2) +
  plot_layout(axis_titles = "collect")
gg_border_effect
```

```{r}
remove_left <- unique(left$fov_cell[left$d_border_px < 25 & left$nCount_RNA < mean(left$nCount_RNA)])
remove_right <- unique(right$fov_cell[right$d_border_px < 25 & right$nCount_RNA < mean(right$nCount_RNA)])
remove_bottom <- unique(bottom$fov_cell[bottom$d_border_px < 25 & bottom$nCount_RNA < mean(bottom$nCount_RNA)])
remove_top <- unique(top$fov_cell[top$d_border_px < 25 & top$nCount_RNA < mean(top$nCount_RNA)])
remove <- c(remove_top,remove_bottom,remove_left,remove_right)
```

```{r}
sce$fov_cell <- paste0(sce$fov, "_", sce$cell_id)

filt <- sce[,!sce$fov_cell %in% remove]
sce
filt
```


```{r}
tbl_unfilt <- as.data.frame(table(sce$fov))
tbl_filt <- as.data.frame(table(filt$fov))

colnames(tbl_filt)[colnames(tbl_filt) == "Freq"] <- "Freq_2"

tbl_merged <- merge(tbl_unfilt, tbl_filt, by = "Var1", all = TRUE)
tbl_merged$pct_removed <- round((((tbl_merged$Freq - tbl_merged$Freq_2)/tbl_merged$Freq)*100), 2)
tbl_merged$pct_kept <- 100- tbl_merged$pct_removed
```


```{r}
# Create a new column for the difference
tbl_merged$cells_removed <- tbl_merged$Freq - tbl_merged$Freq_2

# Calculate the total counts for each FOV
tbl_merged$Total <- tbl_merged$Freq

# Calculate the relative percentages
tbl_merged$removed_pct <- tbl_merged$cells_removed / tbl_merged$Total * 100

# Order the data frame by FOV
tbl_merged <- tbl_merged[order(tbl_merged$Var1),]

# Restructure the data for ggplot2
tbl_long <- tbl_merged %>%
  select(Var1, cells_removed, Freq_2) %>%
  pivot_longer(cols = c(cells_removed, Freq_2), names_to = "Category", values_to = "Count")

tbl_long$Category <- factor(tbl_long$Category, levels = c("Freq_2", "cells_removed"))
# Calculate the median percentage cells removed
median_removed_pct <- round(median(tbl_merged$removed_pct), 2)
total_cells_removed <- sum(tbl_merged$cells_removed)
total_cells_kept <- sum(tbl_merged$Freq_2)

# Create the ggplot
gg_border_eff_quantification <- ggplot(tbl_long, aes(x = Var1, y = Count, fill = Category)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = c("grey", "red"), labels = c(glue("Kept (N = {total_cells_kept})"),
                                                              glue("Removed (N = {total_cells_removed})"))) +
  labs(
    x = "FOV", 
    y = "# Cells", 
    fill = ""
  ) +
  theme(plot.title = element_text(size = 20))  # Increase the title size to 20

gg_border_eff_quantification <- gg_border_eff_quantification +
  theme_bw() +
  theme(
    text = element_text(size = 20, color = "black"),
    axis.text = element_text(size = 16, color = "black"),
    plot.subtitle = element_text(size = 16,color = "black"),
    panel.grid = element_blank(),
    legend.position = "top") +
  scale_x_discrete(
    breaks = c("1", "10", "20", "30", "40", "50", "60", "70", "80", "90", "97"),
    labels = c("1", "10", "20", "30", "40", "50", "60", "70", "80", "90", "97"))
# Print the ggplot
print(gg_border_eff_quantification)
```

```{r fig.width=20, fig.height= 15}
c <-wrap_plots(
  qcmet_hist("sum",discard_sum,0,13000),
  qcmet_hist("detected",discard_detected,0,1000),
  qcmet_hist("Area.um2",discard_area,0,1000),
  ncol = 1) +
  plot_layout(axis_titles = "collect")

de <- wrap_plots(gg_border_effect, gg_border_eff_quantification, nrow = 2)

pdf("/Users/emanuelepitino/Desktop/fig1/cde.pdf", height = 8, width = 15)
wrap_plots(c,de, ncol = 2) + plot_layout(widths = c(1,3))
dev.off()
```


```{r}
pdf(glue("{proj_dir}/figures/fig1/raw/bord_eff.pdf"), width = 6, height = 7)
wrap_plots(gg_border_effect, gg_border_eff_quantification, nrow = 2) +
  plot_annotation(title  = glue("Border effect - {stamp} - {sample}"))
dev.off()

gg_bord_eff <- wrap_plots(gg_border_effect, gg_border_eff_quantification, nrow = 2) +
  plot_annotation(title  = glue("Border effect - {stamp} - {sample}"))
saveRDS(gg_bord_eff,glue("{proj_dir}/figures/fig1/rds/bord_eff.rds"))
```

# Spatial distribution of counts - features - cell area
```{r}
df <- as.data.frame(colData(filt))
plot_metrics <- function(data, color_var) {
  ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = .data[[color_var]])) + 
  coord_equal() +
  scale_color_gradientn(colors  = c("gold","navy")) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) 
}

# Plot for nCount_RNA
gg_spat_counts <- plot_metrics(df, "nCount_RNA")
# Plot for nFeature_RNA
gg_spat_feat <- plot_metrics(df, "nFeature_RNA")

# Cell area
gg_spat_area <- plot_metrics(df, "Area.um2")


gg_spat_metrics <- wrap_plots(gg_spat_counts,gg_spat_feat, gg_spat_area, ncol = 3) + 
  plot_annotation(title = glue("{stamp} - {sample}"), tag_levels = "A",theme = theme(plot.title = element_text(size = 30)))
```

```{r}
gg_spat_counts
gg_spat_feat
gg_spat_area
```

## Save plots
```{r}
pltdir <- glue("{plt_dir}/{stamp}/{sample}")
dir.create(pltdir, showWarnings = F, recursive = T)

pdf(glue("{pltdir}/QC1_{stamp}_{sample}.pdf"), width = 15, height = 4)
gg_qc_metrics
dev.off()
```

```{r}
pdf(glue("{plt_dir}/QC2.pdf"), width = 10, height = 8 )
wrap_plots(gg_border_effect, gg_border_eff_quantification, nrow = 2) +
  plot_annotation(title  = glue("Border effect - {stamp} - {sample}"),
    subtitle = paste("Median Cells removed/FOV:", median_removed_pct,"%"),
    tag_levels = "A") +
  plot_layout(heights = c(2,1))
dev.off()
```

```{r}
pdf(glue("{plt_dir}/QC3.pdf"), width = 24, height = 18)
gg_spat_metrics
dev.off()
```

## Save sce
```{r}
outdir <- glue("{proj_dir}/data/{stamp}/processed/{sample}")
dir.create(outdir, showWarnings = F, recursive = T)
qsave(filt, file = glue("{outdir}/qc_{sample}.qs"), nthreads = 8)
```
