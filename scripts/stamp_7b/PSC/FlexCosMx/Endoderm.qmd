---
title: "Mapping Flex - CosMx - Endoderm"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 16     
  fig-height: 12 
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(glue)
library(qs)
library(BiocParallel)
library(BiocNeighbors)
library(BiocSingular)
library(data.table)
library(InSituType)
})
```

### Data loading

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

#### CosMx
```{r}
stamp <- "stamp_7b"
sample <- "mesoderm"
res_dir <- glue("{proj_dir}/data/{stamp}/iPSCs")
cosmx <- qread(glue("{res_dir}/clustered_sce.qs"), nthreads = 8)
cosmx <- cosmx[,cosmx$sample == sample]
cosmx
```

#### Flex
```{r}
outdir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
flex <- qread(glue("{outdir}/clust_sce.qs"), nthreads = 8)
flex
```

### Add tech info in metadata
```{r}
cosmx$tech <- "cosmx"
flex$tech <- "flex"
```

## Subset for intersection with CosMx panel
```{r}
fs <- rownames(cosmx)
fs <- intersect(fs, rownames(flex))
flex <- flex[fs,]
cosmx <- cosmx[fs,]

# take mtx 
mtx_fl <- counts(flex)
mtx_cs <- counts(cosmx)
mtx <- cbind(mtx_fl,mtx_cs)

# take colData
cd_fl <- as.data.frame(colData(flex)) %>% select(sample,tech)
cd_cs <- as.data.frame(colData(cosmx))  %>% select(sample,tech)

cd <- rbind(cd_fl,cd_cs)

# merge sce
sce <- SingleCellExperiment(
  assays = list(counts = mtx),
  colData = cd
)
```

## LogNormalize
```{r}
sce <- logNormCounts(sce)
```


## PCA
```{r}
set.seed(101001)
sce <- fixedPCA(sce, subset.row = NULL)
```

```{r}
num_pcs_to_retain <- 20
percent.var <- attr(reducedDim(sce), "percentVar")

# Create a data frame for ggplot
data <- data.frame(PC = 1:length(percent.var), Variance = percent.var)
# Plot
gg_var <- ggplot(data, aes(x = PC, y = Variance)) +
  geom_point() +
  xlab("PC") +
  ylab("Variance explained (%)") +
  geom_vline(xintercept = num_pcs_to_retain, color = "red") +
  theme_bw()
gg_var
```

## Integrate with Harmony over tech variable
```{r}
sce <- harmony::RunHarmony(
  sce,
  group.by.vars = "tech",
  dims.use = 1:20,
  verbose = TRUE,
  reduction.save = "HARMONY",
  ncores = 8
)
```


##

```{r}
df <- as.data.frame(colData(sce)) # cd
pca <- reducedDim(sce,"PCA") # pc
harmony <- reducedDim(sce,"HARMONY") # pc

df <- cbind(df,pca,harmony) # merge
df <- df[sample(nrow(df)), ] # shuffle

pal <- Polychrome::createPalette(n_distinct(sce$tech), c("#FBB4AE", "#B3CDE3", "#CCEBC5"))
names(pal) <- unique(sce$tech)

wrap_plots(
# not integrated PCA
ggplot(df, aes(x = PC1, y = PC2, color = tech)) +
  geom_point(shape = 16, size = 0.5) +
  theme_bw() +
  scale_color_manual(values = pal) +
  theme(
    text = element_text(size = 25, color = "black"),
    axis.text = element_text(size = 20, color = "black"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 18),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()) +
  coord_equal() +
  guides(color = guide_legend(override.aes = list(size = 5))),

# integrated PCA
ggplot(df, aes(x = HARMONY_1, y = HARMONY_2, color = tech)) +
  geom_point(shape = 16, size = 0.5) +
  theme_bw() +
  scale_color_manual(values = pal) +
  theme(
    text = element_text(size = 25, color = "black"),
    axis.text = element_text(size = 20, color = "black"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 18),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank()) +
  coord_equal()+
  guides(color = guide_legend(override.aes = list(size = 5))),
ncol = 2) +
  plot_layout(guides = "collect")
```

# Cluster on harmony-corrected Principal Components
```{r}
## Build snn graph
snn <- buildSNNGraph(sce, type = "jaccard", use.dimred="HARMONY", BPPARAM = bp)
## Run louvain 
clusters <- igraph::cluster_louvain(snn, resolution = 0.5)
```

```{r}
sce$label <- clusters$membership
df <- as.data.frame(colData(sce))
```

```{r}
pal <- Polychrome::createPalette(30, c("#FBB4AE", "#B3CDE3", "#CCEBC5"))
names(pal) <- c(unique(sce$sample), unique(sce$tech), unique(sce$label))

df <- as.data.frame(table(df$label, df$tech,df$sample))
# Calculate the percentage and reorder by 'singlet' percentage
df <- df %>%
  group_by(Var1) %>%
  mutate(pct = round(Freq / sum(Freq), 2)) %>%
  ungroup()
# Create the plot
ggplot(df, aes(x = Var3, y = Freq, fill = Var1)) +
  geom_col(position = "stack") + 
  labs(x = "Cluster", y = "Frequency") + 
  theme_bw() +
  scale_fill_manual(values = pal) +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black")) + 
  guides(color = guide_legend(override.aes = list(size = 3))) + 
  facet_wrap(~Var2)
```

```{r}
cd <- as.data.frame(colData(sce))
df <- as.data.frame(table(cd$label,cd$tech))
df <- df %>% 
  group_by(Var1) %>%
  mutate(pct = round(Freq/ sum(Freq),4))

df <- df %>%
  group_by(Var1) %>%
  mutate(pct = round(Freq / sum(Freq), 2)) %>%
  ungroup()
# Create the plot
df$Var1 <- factor(df$Var1, levels = c(1,3,4,2,5,6,7,8,9))
ggplot(df, aes(x = Var1, y = pct, fill = Var2)) +
  geom_col(position = "stack") + 
  labs(x = "Cluster", y = "Frequency", fill = "Tech") + 
  theme_bw() +
  scale_fill_manual(values = pal) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
    theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black"),
        aspect.ratio = 2/1) 

```


```{r}
sessionInfo()
```




