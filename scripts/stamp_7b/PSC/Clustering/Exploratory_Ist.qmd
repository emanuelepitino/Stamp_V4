---
title: "Exploratory - clustering - Stamp 7b - iPSCs"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 16     
  fig-height: 12 
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(glue)
library(qs)
library(BiocParallel)
library(BiocNeighbors)
library(BiocSingular)
library(data.table)
library(InSituType)
})
```

### Data loading

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

```{r}
stamp <- "stamp_7b"
sample <- "iPSCs"

res_dir <- glue("{proj_dir}/data/{stamp}/{sample}")
sce <- qread(glue("{res_dir}/PreProcNew.qs"), nthreads = 8)
#sce <- sce[,sample(colnames(sce),1000)]
sce 
```

```{r}
dir <- glue("{proj_dir}/data/{stamp}/{sample}/Ist")
unsup <- qread(glue("{dir}/unsup_3_6.qs"))
```



```{r}
sce$label <- unsup$clust[colnames(sce)]
sce$label_prob <- unsup$prob[colnames(sce)]
pal <- Polychrome::createPalette(26, c("#fc6060", "#74f774", "#7c7cfc"))
names(pal) <- unique(sce$label)
```

## Cell numbers

```{r}
df <- as.data.frame(table(sce$label)) %>%
  mutate(Proportion = round((Freq / sum(Freq)) * 100, 2)) %>%
  arrange(desc(Freq)) 

# Reorder Var1 factor levels based on Freq
df$Var1 <- factor(df$Var1, levels = df$Var1)
ggplot(df, aes(x = Var1, y = Freq)) + 
  geom_col(aes(fill = Var1)) +
  geom_text(aes(label = Freq), vjust = -0.5, size = 5) +
  scale_fill_manual(values = pal) + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 15, color = "black"),
        panel.grid = element_blank()) +
  labs(fill = "Sample", y = "# Cells") +
  labs(x = "Cluster", fill = "Cluster")
```

## Label transfer probability in space
```{r}
df <- as.data.frame(colData(sce))
df <- df[sample(rownames(df)),]

 ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = sample)) + 
#  scale_color_viridis_c() +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 800) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  labs(x = "x_px", y = "y_px") +
  coord_equal() +
  labs(color = "IST prob")
```

## Clusters proportion/Sample
```{r}
df <- as.data.frame(table(sce$sample,sce$label)) %>%
      group_by(Var1) %>%
      mutate(Proportion = round((Freq / sum(Freq)) * 100, 2))

ggplot(df, aes( x = Var1 , y = Proportion, fill = Var2)) + 
  geom_col() +
  scale_fill_manual(values = pal) +
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 15, color = "black"),
        panel.grid = element_blank()) +
  labs(x = "Sample", fill = "Cluster")
```

## Space
```{r}
df <- as.data.frame(colData(sce))
df <- df[sample(rownames(df)),]

 ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = label)) + 
  scale_color_manual(values = pal) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) +
  labs(x = "x_px", y = "y_px") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
   coord_equal() +
   labs(color = "Cluster")
```


## FlightPath
```{r}
fp_layout <- flightpath_layout(logliks = unsup$logliks, profiles = unsup$profiles)

gg_fp <- ggplot(fp_layout$cellpos, aes(x = x, y = y, color = fp_layout$clust)) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 800) +
  scale_color_manual(values = pal) +
  theme_bw() +
    theme(text = element_text(size = 15, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          panel.grid = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color = "Cluster", title = glue("FlightPath - {stamp} - {sample}")) +
  guides(color = guide_legend(override.aes = list(size = 4))) 

gg_fp
```

## InSituType Profiles

```{r}
norm <- normalizeCounts(unsup$profiles) # normalize
norm <- norm + 1e-6
```

Calculate logFC

```{r}
result <- norm 
for (i in 1:nrow(norm)) {
  for (j in 1:ncol(norm)) {
    result[i, j] <- log2(norm[i, j] / mean(norm[i, -j]))
  }
}
```

Take first 10 features for each cluster by logFC

```{r}
feat <- unique(as.vector(unlist(apply(result, 2, function(column) {
  names(sort(column, decreasing = TRUE))[1:10]
}))))
```


Remove outliers at 2.5 sd for better visualization

```{r}
x <- result[feat,]

z <- \(x, th=2.5) {
    if (is.null(dim(x))) {
        x[x < 0] <- 0
        sd <- sd(x, na.rm=TRUE)
        x <- x-mean(x, na.rm=TRUE)
        if (sd != 0) x <- x/sd
    } else {
        mus <- colMeans(x)
        sds <- colSds(x)
        x <- sweep(x, 2, mus, `-`)
        x <- sweep(x, 2, sds, `/`)
    }
    x[x > +th] <- +th
    x[x < -th] <- -th
    return(x)
}
mtx_scaled <- z(x)
```

Plot

```{r}
library(reshape2)
library(ggdendro)

# Perform hierarchical clustering on columns
column_dist_euclidean <- dist(t(mtx_scaled), method = "euclidean")  # Use transpose to cluster columns
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")

# Reorder the columns based on clustering
ordered_columns <- column_hclust_complete$order
mtx_scaled_ordered <- mtx_scaled[, ordered_columns]
colnames(mtx_scaled_ordered) <- colnames(mtx_scaled)[ordered_columns]

# Convert the matrix into a format suitable for ggplot
mtx_melted <- melt(t(mtx_scaled_ordered))

mtx_melted$Var1 <- factor(mtx_melted$Var1, levels = rev(c("a","b","c","d","e","f","g",
                                                      "h","i","j")))

# Create the heatmap using ggplot2
hm <- ggplot(mtx_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "navy", mid = "white", high = "red", midpoint = 0, name = "expression") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1, color = "black"),
    axis.text.y = element_text(size = 9, color = "black"),
    axis.title = element_blank(),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),
    aspect.ratio = 1/5
  ) +
  coord_flip() +
  labs(x = "", y = "")
  hm

pdf("/Users/emanuelepitino/Desktop/tmp_long/stamp_7b_iPSC/tri-lineage/cosmx/hm_ist_prof.pdf", width = 15)
hm
dev.off()
```

# Save sce
```{r}
qsave(sce, file = glue("{res_dir}/clustered_sce.qs"))
```

```{r}
sessionInfo()
```




