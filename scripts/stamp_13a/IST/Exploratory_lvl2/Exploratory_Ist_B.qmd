---
title: "Exploratory - clustering - Stamp_13a"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 16     
  fig-height: 12 
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(glue)
library(qs)
library(BiocParallel)
library(BiocNeighbors)
library(BiocSingular)
library(data.table)
library(spatstat)
library(InSituType)
})
```

### Data loading

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

```{r}
stamp <- "stamp_13a"
subs <- "B"
res_dir <- glue("{proj_dir}/data/{stamp}/processed")
sce <- qread(glue("{res_dir}/anno_sce_P1.qs"), nthreads = 8)
sce <- sce[,sce$lvl0 == subs]
```

```{r}
dir <- glue("{proj_dir}/data/{stamp}/Ist")
unsup <- qread(glue("{dir}/unsup_{subs}.qs"))
```


```{r}
sce$label <- unsup$clust[colnames(sce)]
sce$label_prob <- unsup$prob[colnames(sce)]

pal_layout <- pal_s13a

pal <- Polychrome::createPalette(26,c("#99FFFF", "#FF99FF", "#FFFF99"))
names(pal) <- unique(sce$label)
```

## Label transfer probability in space
```{r}
df <- as.data.frame(colData(sce))
 ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = label_prob)) + 
 # scale_color_manual(values = pal) +
  geom_point(size = 0.1, shape = 16) +
  scale_color_viridis_c() +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  labs(x = "x_px", y = "y_px") +
   coord_equal() +
   labs(color = "Ist Prob", subtitle = glue("Prob < 0.8: {format(sum(df$label_prob < 0.8),big.mark = ',')}"))
```

## Remove cells with transfer prob < 0.8
```{r}
sce <- sce[, sce$label_prob > 0.8]
```

## Cell numbers

```{r}
df <- as.data.frame(table(sce$label)) %>%
  mutate(Proportion = round((Freq/sum(Freq))*100, 2)) %>%
  mutate(Var1 = factor(Var1, levels = Var1[order(-Freq)]))  # Reorder the levels of Var1 by decreasing Freq

ggplot(df, aes(x = Var1, y = Freq, fill = Var1)) + 
  geom_col() + 
  geom_text(aes(label = Freq), vjust = -0.5) +  # Add the values on top of each bar
  labs(x = "Cluster", y = "# Cells", fill = "Cluster") + 
  theme_bw() + 
  theme(panel.grid = element_blank()) +
  scale_fill_manual(values = pal)
```

## Space
```{r}
df <- as.data.frame(colData(sce))
df <- df[sample(rownames(df)),]

gg_space <-  ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = label)) + 
  scale_color_manual(values = pal) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  labs(x = "x_px", y = "y_px") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
   coord_equal() +
   labs(color = "Cluster")

gg_space
```

```{r}
plist <- list()
for(clust in unique(df$label)){
  
  sub <- df[df$label == clust,]
  plist[[clust]] <- ggplot(sub, aes(x = CenterX_global_px, y = CenterY_global_px, color = label)) + 
  scale_color_manual(values = pal) +
  geom_point(size = 0.1, shape = 16) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text.x = element_blank(),
        axis.text.y = element_blank()) +
  labs(x = "x_px", y = "y_px") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
   coord_equal() +
   labs(subtitle = clust)
}
plist
```


## FlightPath
```{r}
fp_layout <- flightpath_layout(logliks = unsup$logliks, profiles = unsup$profiles)

gg_fp <- ggplot(fp_layout$cellpos, aes(x = x, y = y, color = fp_layout$clust)) +
  geom_point(size = 0.3, shape = 16) +
  scale_color_manual(values = pal) +
  theme_bw() +
    theme(text = element_text(size = 15, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          panel.grid = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color = "Cluster", title = glue("FlightPath - {stamp}")) +
  guides(color = guide_legend(override.aes = list(size = 4))) 
gg_fp
```

## InSituType Profiles

Normalize & log-transform the profiles
```{r}
norm <- unsup$profiles /  Matrix::colSums(unsup$profiles) # average
norm <- norm + 1e-6
```

Calculate logFC

```{r}
result <- norm 
for (i in 1:nrow(norm)) {
  for (j in 1:ncol(norm)) {
    result[i, j] <- log2(norm[i, j] / mean(norm[i, -j]))
  }
}
```

Take top features for each cluster by logFC

```{r}
feat <- unique(as.vector(unlist(apply(result, 2, function(column) {
  names(sort(column, decreasing = TRUE))[1:20]
}))))
```

Remove outliers at 2.5 sd for better visualization

```{r}
x <- result[feat,]

z <- \(x, th=2.5) {
    if (is.null(dim(x))) {
        x[x < 0] <- 0
        sd <- sd(x, na.rm=TRUE)
        x <- x-mean(x, na.rm=TRUE)
        if (sd != 0) x <- x/sd
    } else {
        mus <- colMeans(x)
        sds <- colSds(x)
        x <- sweep(x, 2, mus, `-`)
        x <- sweep(x, 2, sds, `/`)
    }
    x[x > +th] <- +th
    x[x < -th] <- -th
    return(x)
}
mtx_scaled <- z(x)
```

Plot

```{r, fig.width = 15, fig.height= 5}
library(reshape2)
library(ggdendro)

# Perform hierarchical clustering on columns
column_dist_euclidean <- dist(t(mtx_scaled), method = "euclidean")  # Use transpose to cluster columns
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")

# Reorder the columns based on clustering
ordered_columns <- column_hclust_complete$order
mtx_scaled_ordered <- mtx_scaled[, ordered_columns]
colnames(mtx_scaled_ordered) <- colnames(mtx_scaled)[ordered_columns]

# Convert the matrix into a format suitable for ggplot
mtx_melted <- melt(t(mtx_scaled_ordered))
mtx_melted$Var1 <- factor(mtx_melted$Var1, levels = c("a","b","c","d","e"))
# Create the heatmap using ggplot2
hm <- ggplot(mtx_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "navy", mid = "white", high = "red", midpoint = 0, name = "expression") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 90, vjust = 1, hjust = 1, color = "black"),
    axis.text.y = element_text(size = 12, color = "black"),
    axis.title = element_blank(),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),
    aspect.ratio = 1/10
  ) +
  labs(x = "", y = "") +
  coord_flip() +
  labs(title = subs)

pltsdir <- glue("{plt_dir}/{stamp}")
pdf(glue("{pltsdir}/hm_{subs}.pdf"), width = 5, height = 20)
hm
dev.off()
```

```{r}
sce$lvl2[sce$label == "a"] <- "doublet" # CD19,CCL22,CCL17
sce$lvl2[sce$label == "b"] <- "class. switched B"
sce$lvl2[sce$label == "c"] <- "doublet" # CD68, NKG7, IL3RA
sce$lvl2[sce$label == "d"] <- "naive B" # IGHD IGHM
sce$lvl2[sce$label == "e"] <- "activated B" # CD69
```


```{r}
feat <- c("CCL22","CCL17","IFNG","IL6","IL2RA","IL2","GZMB","IL3RA","NKG7","CD68",
          "IGHG1","IGHG2","IGHA1","JCHAIN",
          "IGHM","IGHD","CD37","MS4A1",
          "CD69","CXCR4","CD44","BCL2","CD79A")
```


```{r, fig.width=5, fig.height=10}
sce$lvl2 <- factor(sce$lvl2, levels = c("doublet",
                                        "class. switched B",
                                        "naive B",
                                        "activated B"))

dot <- plotDots(sce, group = "lvl2", features = feat, scale = T, center = T) +
  scale_color_gradient2("z-scaled\nmean expr.", low="blue4", mid="grey90", high="red4") +
  scale_size_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.5), range=c(0.1, 2)) +
  theme_minimal(6) + theme(
  #  aspect.ratio = length(feat)/length(unique(sce$lvl1)),
    aspect.ratio = 3/1,
    axis.text.y=element_text(color="black", size = 6),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, color="black", size = 7),
        panel.grid.major = element_line(linewidth = 0.1, color = "lightgrey"),
        axis.title=element_blank(), 
        legend.key.size = unit(0.5, "lines")) 
  
dot
```


```{r, fig.width=5, fig.height=10}
dir <- glue("{proj_dir}/data/{stamp}/processed")
qsave(sce, file = glue("{dir}/anno_sce_{subs}.qs"), nthreads = 8)
```

```{r}
sessionInfo()
```
