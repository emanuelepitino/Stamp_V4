---
title: "PBMCs comparison across platforms"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
---

In this script, we will compare basic quality metrics in main PBMCs populations (CD4,CD8,Myeloid,NK,B) across different technologies (STAMP,10xFlex,10x5', 10x3'). To ensure a fair comparison, we will be compari

## Libraries
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
#library(tidySingleCellExperiment)
library(dplyr)
library(here)
library(glue)
library(qs)
library(scuttle)
library(scater)
#library(HDF5Array)
library(patchwork)
library(scDblFinder)
library(scran)
library(BiocSingular)
library(PCAtools)
})
```

## Data loading
We load the single cell experiments already annotated
```{r}
source(glue("{here()}/scripts/misc/BIN.R")) # bin
source(glue("{here()}/scripts/misc/paths.R")) # paths

flex <- qread(glue("{proj_dir}/data/flex_pbmcs/Lvl1/lvl1_sce.qs"), nthreads = 8)
ten_five <- qread(glue("{proj_dir}/data/PBMCs_5prime/Lvl1/lvl1_sce.qs"), nthreads = 8)
ten_three <- qread(glue("{proj_dir}/data/PBMCs_3prime/Lvl1/lvl1_sce.qs"), nthreads = 8)


stamp_lvl1 <- qread(glue("{proj_dir}/data/stamp_11/PBMCs/processed/lvl1_sce.qs"), nthreads = 8) # stamp-x #11 5k
stamp_cd4_cd8 <- qread(glue("{proj_dir}/data/stamp_11/PBMCs/processed/T/lvl1_sce.qs"), nthreads = 8) # stamp-x #11 5k
```

# Homogenize cd of STAMP sce before binding 
```{r}
stamp_cd4_cd8$lvl1 <- stamp_cd4_cd8$lvl2
colData(stamp_cd4_cd8) <- colData(stamp_cd4_cd8)[c("lvl1","sum","detected")]
stamp_lvl1 <- stamp_lvl1[,! stamp_lvl1$lvl1 %in%  c("T","LowQ")]
colData(stamp_lvl1) <- colData(stamp_lvl1)[c("lvl1","sum","detected")]

stamp <- cbind(stamp_lvl1,stamp_cd4_cd8)
stamp$tech <- "STAMP"
stamp$panel_size <- nrow(stamp)
altExps(stamp) <- NULL
#stamp <- stamp[,sample(colnames(stamp),6)] # keep only 10k cells
stamp
```

## Function to randomly sample n cells keeping proportions
```{r}
subset_lvl1 <- \(sce,n_total = 10000){
  
# Get proportions of each lvl1 category
lvl1_counts <- table(sce$lvl1)
lvl1_props <- lvl1_counts / sum(lvl1_counts)

# Compute number of samples to take from each category
lvl1_sample_sizes <- round(lvl1_props * n_total)

# Sample while maintaining proportions
set.seed(123)  # For reproducibility
sampled_cells <- unlist(lapply(names(lvl1_sample_sizes), function(x) {
  sample(which(sce$lvl1 == x), lvl1_sample_sizes[x])
}))

# Subset the SCE object
sce <- sce[, sampled_cells]
return(sce)
}

tst <- subset_lvl1(ten_five,6000)

# subset the objects
stamp <- subset_lvl1(stamp,6000)
ten_five <- subset_lvl1(ten_five,6000)
ten_three <- subset_lvl1(ten_three,6000)
flex <- subset_lvl1(flex,6000)
```

# Merge the 10x datasets
```{r}
ten <- mget(c("flex", "ten_five", "ten_three")) # named sce list
ten <- lapply(ten,\(.){.[,.$scDblFinder.class != "doublet"]}) # filter out doublets

ten <- lapply(ten, \(.){colData(.) <- colData(.)[c("lvl1","sum","detected")];.}) # keep col of interest  
ten <- lapply(names(ten), \(.) {colData(ten[[.]])[["tech"]] <- .;ten[[.]]}) # add tech info
ten <- lapply(ten, \(.) {rowData(.) <- NULL;.}) # remove rowData 
ten <- lapply(ten, \(.) {.$panel_size <- nrow(.);.}) # add panel size removing not named genes

ft <- Reduce(intersect, lapply(ten, rownames))
ten <- lapply(ten,\(.)(.[ft,]))
ten <- lapply(ten,\(.){metadata(.) <- list();.})

ten <- lapply(ten, \(.) {counts(.) <- as(counts(.), "TsparseMatrix");.})

tenx <- Reduce(cbind,ten)
tenx
```

# Quality metrics
```{r}
full <- c(ten,list(stamp))
#full <- lapply(full,\(.)(addPerCellQCMetrics(.)))
cd <- do.call(rbind, lapply(full, \(.) as.data.frame(colData(.))))
cd$detected_pct <- round(cd$detected / cd$panel_size,4)

cd$tech[cd$tech == "ten_five"] <- "10X5"
cd$tech[cd$tech == "ten_three"] <- "10X3"
cd$tech[cd$tech == "flex"] <- "Flex"

cd <- cd[cd$lvl1 %in% c("CD4","CD8","B","NK","Myeloid"),]
cd$tech <- factor(cd$tech, levels = c("10X5","10X3","Flex","STAMP"))

pal <- RColorBrewer::brewer.pal(n_distinct(cd$tech), "Set1")
names(pal) <- levels(cd$tech)

plt <- \(var, ylab){
  
#cd$tech <- factor(cd$tech, levels = names(sort(tapply(cd[[var]], cd$tech, median))))
ggplot(cd, aes(x = tech, y = !!sym(var), color = tech)) +
  ggrastr::rasterise(geom_boxplot(outlier.size = 0.1),dpi = 1200) +
  scale_color_manual(values = pal) +
  theme_bw(base_size = 16) +
  labs(color ="Tech", x= "", y = ylab) + 
  facet_wrap(~lvl1, nrow = 1) +
  theme(axis.text = element_text(color = "black"),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
}

p1 <- wrap_plots(
  plt("detected_pct","nFeatures / Total nFeatures") + theme(aspect.ratio = 1/1) + coord_cartesian(ylim = c(0,0.2)),
  plt("detected","nFeatures") + theme(aspect.ratio = 1/1) + scale_y_log10(),
  plt("sum","nCounts")+ theme(aspect.ratio = 1/1) + scale_y_log10(),
  ncol = 1) +
  plot_layout(axis_titles = "collect", guides = "collect")

p1
```


```{r}
pdf(glue("{proj_dir}/plots/revision/20k_PBMCs_comparison_1.pdf"), width = 10, height = 8)
p1
dev.off()
```

# QC on intersection
To ensure a more fair comparison, we will calculate such metrics only on the intersection of the panels
```{r}
ft <- Reduce(intersect, lapply(full, rownames))
length(ft)

full <- lapply(full,\(.)(.[ft,])) # subset to keep intersection
full <- lapply(full, \(.){colData(.) <- colData(.)[c("lvl1","tech","panel_size")];.}) # keep col of interest  
full <- lapply(full,\(.)(addPerCellQCMetrics(.))) # re add new qc metrics on intersection

cd <- do.call(rbind, lapply(full, \(.) as.data.frame(colData(.), stringsAsFactors = FALSE))) # merge cd


cd$tech[cd$tech == "ten_five"] <- "10X5"
cd$tech[cd$tech == "ten_three"] <- "10X3"
cd$tech[cd$tech == "flex"] <- "Flex"

cd <- cd[cd$lvl1 %in% c("CD4","CD8","B","NK","Myeloid"),]

cd$tech <- factor(cd$tech, levels = c("10X5","10X3","Flex","STAMP"))

p2 <- wrap_plots(
  plt("sum","nCounts") + theme(aspect.ratio = 1/1) + scale_y_log10() + coord_cartesian(ylim = c(100,3000)),
  plt("detected","nFeatures")+ theme(aspect.ratio = 1/1)  + scale_y_log10() + coord_cartesian(ylim = c(100,1500)),
  ncol = 1) +
  plot_layout(axis_titles = "collect", guides = "collect")

pdf(glue("{proj_dir}/plots/revision/20k_PBMCs_comparison_2.pdf"), width = 10, height = 4)
p2
dev.off()
```

# Lineage-defying markers and Transcription factors
```{r}
markers <- c(
  "CD4", "CCR7", "LEF1", "FOXP3", "TCF7",
  "CD8A", "GZMB", "IFNG", "PRF1",
  "CD14", "ITGAM", "FCGR3A", "MPO",
  "CD19", "MS4A1", "CD79A", "CD79B", "PAX5",
  "NCAM1", "KLRD1", "PRF1", "EOMES",
  "CLEC4C", "TCF4", "LILRA4",
  "CLEC9A", "BATF3", "XCR1", "IDO1",
  "CD1C", "FCER1A", "IRF4", "CLEC10A",
  "CD274", "PDCD1LG2"
)
sub <- lapply(full,\(.)(.[markers,]))

sub <- lapply(sub, \(.){colData(.) <- colData(.)[c("lvl1","tech","panel_size")];.}) # keep col of interest  
sub <- lapply(sub,\(.)(addPerCellQCMetrics(.))) # re add new qc metrics on intersection

cd <- do.call(rbind, lapply(sub, \(.) as.data.frame(colData(.), stringsAsFactors = FALSE))) # merge cd


cd$tech[cd$tech == "ten_five"] <- "10X5"
cd$tech[cd$tech == "ten_three"] <- "10X3"
cd$tech[cd$tech == "flex"] <- "Flex"

cd <- cd[cd$lvl1 %in% c("CD4","CD8","B","NK","Myeloid"),]
cd$tech <- factor(cd$tech, levels = c("10X5","10X3","Flex","STAMP"))
```

```{r}
sub <- lapply(sub,\(.)(.[,.$lvl1 %in% c("CD4","CD8","B","NK","Myeloid")]))
sub <- lapply(sub,\(.){.$tech_ctype <- paste0(.$tech,"_",.$lvl1);.})

# Take matrix
cs <- lapply(sub,\(.){
  cs <- as(counts(.),"dgCMatrix")
  df <- as.data.frame(colData(.))
  colnames(cs) <- df[colnames(cs), "tech_ctype"]
  cs
})
# function to aggregate and average
aggr_avg <- function(mat){
  res <- do.call(cbind, lapply(unique(colnames(mat)), function(col_name) {
    sub <- mat[, colnames(mat) %in% col_name, drop = FALSE]
    agg <- rowSums(sub) / ncol(sub)
    agg
  }))
  colnames(res) <- unique(colnames(mat))
  return(res)
}
agg_cs <- lapply(cs,\(.)(as.data.frame(aggr_avg(.))))

mtx <- do.call(cbind,agg_cs)
mtx$gene <- rownames(mtx)

mtx <- as.data.frame(tidyr::pivot_longer(mtx, cols = -gene, names_to = "tech", values_to = "avg_counts"))
mtx <- tidyr::separate(mtx, col = tech, into = c("tech", "lvl1"), sep = "_(?=[^_]+$)")

mtx$tech <- recode(mtx$tech, 
                   "flex" = "Flex", 
                   "ten_five" = "10X5", 
                   "ten_three" = "10X3")
```


```{r}
plt <- \(lin,fts){
  ggplot(mtx[mtx$lvl1 %in% lin & mtx$gene %in% fts,], aes(x = tech, y = avg_counts, fill = tech)) +
  geom_col(position = "dodge", width = 0.8) +
  facet_wrap(~gene, scales = "free_y") +
  scale_fill_manual(values = pal) +
  theme_bw(16) +
  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),
        aspect.ratio = 2/1,
        axis.title.x = element_blank())
}

p3 <- wrap_plots(
  plt("B",c("CD19","PAX5")),
  plt("CD4",c("CD4","FOXP3")),
  plt("CD8",c("CD8A","GZMB","IFNG")),
  plt("Myeloid",c("CLEC4C","XCR1","CD1C")),
  nrow = 4) + 
  plot_layout(guides = "collect",axis_titles = "collect", height = c(2,2,2,2))

pdf(glue("{proj_dir}/plots/revision/20k_PBMCs_comparison_3.pdf"), width = 8, height = 12)
p3
dev.off()
```
