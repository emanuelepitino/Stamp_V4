---
title: "Annotation - Stamp_13b"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(glue)
library(qs)
library(BiocParallel)
library(BiocNeighbors)
library(BiocSingular)
library(data.table)
library(spatstat)
library(InSituType)
})
```

### Data loading

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

```{r}
stamp <- "stamp_13b"
res_dir <- glue("{proj_dir}/data/{stamp}/processed")
sce <- qread(glue("{res_dir}/ist_sce.qs"), nthreads = 8)

dir <- glue("{proj_dir}/data/{stamp}/Ist")
unsup <- qread(glue("{dir}/unsup.qs"))
```


```{r}
sce$label <- unsup$clust[colnames(sce)]
sce$label_prob <- unsup$prob[colnames(sce)]

pal <- Polychrome::createPalette(26,c("#99FFFF", "#FF99FF", "#FFFF99"))
names(pal) <- unique(sce$label)
```

# Principal Component Regression
```{r, fig.width= 6, fig.height=4}
.pcr <- \(sce, x) {
    y <- reducedDim(sce, "PCA")
    z <- summary(lm(y ~ sce[[x]]))
    r2 <- sapply(z, \(.) .$adj.r.squared)
    data.frame(x, pc=seq_along(r2), r2)
}
# for multiple variables (mock code):
xs <- c("label","Area.um2","sum","detected","experiment","replicate","timepoint")
df <- do.call(rbind, lapply(xs, \(x) .pcr(sce, x)))


pal_pcr <- Polychrome::createPalette(26,c("#99FFFF", "#FF99FF", "#FFFF99"))
names(pal_pcr) <- unique(df$x)

ggplot(df, aes(x = pc, y = r2, color = x)) +
  geom_line() +
  geom_point(size = 2) +
  theme_bw() + 
  scale_x_continuous(breaks = unique(df$pc)) +
  theme(panel.grid = element_blank(),
        axis.text = element_text(color = "black", size = 15),
        axis.title = element_text(color = "black", size = 25),
        aspect.ratio = 1/2) +
  scale_color_manual(values = pal_pcr) +
  scale_fill_manual(values = pal_pcr)
```

```{r, fig.width=8, fig.height=3}
cd <- as.data.frame(colData(sce))
var <- "sum"

boxp <- \(var){
p <- ggplot(cd,aes(x = label, y = !!sym(var))) +
  geom_boxplot(outlier.size = 0.01) +
  theme_bw() +
  theme(axis.text = element_text(size = 15, color = "black"),
        axis.title = element_text(size = 20, color = "black"),
        aspect.ratio = 1/2) 
  
  if(var == "sum" | var == "detected") {p <- p + scale_y_log10()}
return(p)
}


boxp("sum")
boxp("detected")
boxp("nFeature_negprobes")
boxp("nFeature_falsecode")
boxp("nCount_negprobes")
boxp("nCount_falsecode")


mfi <- grep("Mean", colnames(cd), value = TRUE)
mfi_plts <- list()

for(i in mfi){
  
mfi_plts[[i]] <-  ggplot(cd,aes(x = label, y = asinh(!!sym(i)))) +
  geom_boxplot(outlier.size = 0.01) +
  theme_bw() +
  theme(axis.text = element_text(size = 15, color = "black"),
        axis.title = element_text(size = 20, color = "black"),
        aspect.ratio = 1/2) 
}
mfi_plts
```

# Annotation based on InSituType profiles and cell types proportions
```{r}
sce$lvl1[sce$label == "a"] <- "B"
sce$lvl1[sce$label == "b"] <- "DCs"
sce$lvl1[sce$label == "c"] <- "T_DC"
sce$lvl1[sce$label == "d"] <- "TIM3+ CD8"
sce$lvl1[sce$label == "e"] <- "plasmacells"
sce$lvl1[sce$label == "f"] <- "PDL1+ mono."
sce$lvl1[sce$label == "g"] <- "inflamm. mono."
sce$lvl1[sce$label == "h"] <- "exhausted Th1"
sce$lvl1[sce$label == "i"] <- "Th1"
sce$lvl1[sce$label == "j"] <- "Activated DCs"
sce$lvl1[sce$label == "k"] <- "Naive CD4"
sce$lvl1[sce$label == "l"] <- "Naive CD8"

sce$lvl0 <- ""
sce$lvl0[sce$lvl1 %in% c("TIM3+ CD8","exhausted Th1","Th1","Naive CD4","Naive CD8")] <- "T"
sce$lvl0[sce$lvl1 %in% c("B","plasmacells")] <- "B"
sce$lvl0[sce$lvl1 %in% c("DCs","PDL1+ mono.","inflamm. mono.","Activated DCs")] <- "myeloid"
sce$lvl0[sce$lvl1 == "T_DC"] <- "T_DC"
```

# Quality metrics per cell type
```{r}
cd <- as.data.frame(colData(sce))

boxpl <- \(var,lvl){
p <- ggplot(cd, aes(x = !!sym(lvl), y = !!sym(var))) +
  geom_boxplot(outlier.size = 0.01, alpha = 0.4) +
  theme_bw() +
theme(panel.grid = element_blank(),
      aspect.ratio = 2/3,
      axis.text = element_text(color = "black", size = 14),
      axis.title.y = element_text(color = "black", size = 20),
      axis.title.x = element_blank(),
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  guides(color = "none", fill = "none") 

if(var == "sum") { p <- p + scale_y_log10() + labs(y = "nCounts", x = "") + 
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())}
if(var == "detected") { p <- p + scale_y_log10() + labs(y = "nFeatures", x = "") + 
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())}
if(var == "Area.um2") { p <- p + labs(y = "Area (um2)")}

return(p)
}

wrap_plots(
  boxpl("sum","lvl0"),
  boxpl("detected","lvl0"),
  boxpl("Area.um2","lvl0"),
  ncol = 1
  ) +
  plot_layout(axis_titles = "collect")
```


```{r}
feat <- c("IGHM","IGHD","MS4A1","CD79A","CD19",
          "CXCL9","CCL22","LY75","CD40",
          "KLF2","JUN","JUNB","FOS","CLEC12A",
          "IL2RB","GNLY","HAVCR2","GZMA","NKG7",
          "CD74","HLA-DRB","CD69","IL3RA","CXCL10",
          "HLA-DPB1","S100A10","CD86",
          "IL1B","IL6","IL1A","S100A9","S100A8","CLEC5A",
          "IFNG","CD4","LIF","LAG3","CTLA4","IL2RA","CD3D","CD28",
          "IL2","FASN","ICOS","CD3E",
          "CSF2RA","CD274","CCL19","LAMP3","GAS6","THBS1",
          "TCF7","NELL2","SELL",
          "RORA","CD8A","CD8B")
```


```{r, fig.height=5}
sce$lvl1 <- factor(sce$lvl1, levels = c("B",
                                        "DCs",
                                        "T_DC",
                                        "TIM3+ CD8",
                                        "plasmacells",
                                        "PDL1+ mono.",
                                        "inflamm. mono.",
                                        "exhausted Th1",
                                        "Th1",
                                        "Activated DCs",
                                        "Naive CD4",
                                        "Naive CD8"))

dot <- plotDots(sce, group = "lvl1", features = feat, scale = TRUE, center = TRUE) +
  scale_color_gradient2("z-scaled\nmean expr.", low = "blue4", mid = "grey90", high = "red4") +
  scale_size_continuous(
    limits = c(0, 1),
    breaks = seq(0, 1, 0.5),
    range = c(0.5, 2)  # Increase these numbers to make dots bigger
  ) +
  theme_minimal(6) +
  theme(
    aspect.ratio = 1/4,
    axis.text.y = element_text(color = "black", size = 7),
    axis.text.x = element_text(
      angle = 90,
      hjust = 1,
      vjust = 0.5,
      color = "black",
      size = 5
    ),
    panel.grid.major = element_line(linewidth = 0.1, color = "lightgrey"),
    axis.title = element_blank(),
    legend.key.size = unit(0.5, "lines") 
  ) +
  coord_flip()
dot

pdf("/Users/emanuelepitino/Desktop/stamp_13b/dot.pdf", width = 6)
dot
dev.off()
```

## InSituType Profiles

Normalize & log-transform the profiles
```{r}
norm <- unsup$profiles /  Matrix::colSums(unsup$profiles) # average
norm <- norm + 1e-6
```

Calculate logFC

```{r}
result <- norm 
for (i in 1:nrow(norm)) {
  for (j in 1:ncol(norm)) {
    result[i, j] <- log2(norm[i, j] / mean(norm[i, -j]))
  }
}
```

Remove outliers at 2.5 sd for better visualization

```{r}
x <- result[feat,]

z <- \(x, th=2.5) {
    if (is.null(dim(x))) {
        x[x < 0] <- 0
        sd <- sd(x, na.rm=TRUE)
        x <- x-mean(x, na.rm=TRUE)
        if (sd != 0) x <- x/sd
    } else {
        mus <- colMeans(x)
        sds <- colSds(x)
        x <- sweep(x, 2, mus, `-`)
        x <- sweep(x, 2, sds, `/`)
    }
    x[x > +th] <- +th
    x[x < -th] <- -th
    return(x)
}
mtx_scaled <- z(x)
```

Plot

```{r, fig.width = 15, fig.height= 5}
library(reshape2)
library(ggdendro)

# Perform hierarchical clustering on columns
column_dist_euclidean <- dist(t(mtx_scaled), method = "euclidean")  # Use transpose to cluster columns
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")

# Reorder the columns based on clustering
ordered_columns <- column_hclust_complete$order
mtx_scaled_ordered <- mtx_scaled[, ordered_columns]
colnames(mtx_scaled_ordered) <- colnames(mtx_scaled)[ordered_columns]

# Change annotation
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "a"] <- "B"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "b"] <- "DCs"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "c"] <- "T_DC"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "d"] <- "TIM3+ CD8"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "e"] <- "plasmacells"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "f"] <- "PDL1+ mono."
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "g"] <- "inflamm. mono."
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "h"] <- "exhausted Th1"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "i"] <- "Th1"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "j"] <- "Activated DCs"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "k"] <- "Naive CD4"
colnames(mtx_scaled_ordered)[colnames(mtx_scaled_ordered) == "l"] <- "Naive CD8"

# Convert the matrix into a format suitable for ggplot
mtx_melted <- melt(t(mtx_scaled_ordered))

# Reorder annotation factors
mtx_melted$Var1 <- factor(mtx_melted$Var1, levels = c("B",
                                        "DCs",
                                        "T_DC",
                                        "TIM3+ CD8",
                                        "plasmacells",
                                        "PDL1+ mono.",
                                        "inflamm. mono.",
                                        "exhausted Th1",
                                        "Th1",
                                        "Activated DCs",
                                        "Naive CD4",
                                        "Naive CD8"))

# Reorder genes factors
var2 <- c("IGHM", "IGHD", "MS4A1", "CD79A", "CD19", "CXCL9", "CCL22", 
          "LY75", "CD40", "KLF2", "JUN", "JUNB", "FOS", "CLEC12A", 
          "IL2RB", "GNLY", "HAVCR2", "GZMA", "NKG7", "CD74", "HLA-DRB", 
          "CD69", "IL3RA", "CXCL10", "HLA-DPB1", "S100A10", "CD86", "IL1B", 
          "IL6", "IL1A", "S100A9", "S100A8", "CLEC5A", "IFNG", "CD4", 
          "LIF", "LAG3", "CTLA4", "IL2RA", "CD3D", "CD28", "IL2", 
          "FASN", "ICOS", "CD3E", "CSF2RA", "CD274", "CCL19", "LAMP3", 
          "GAS6", "THBS1", "TCF7", "NELL2", "SELL", "RORA", "CD8A", 
          "CD8B")

mtx_melted$Var2 <- factor(mtx_melted$Var2, 
                        levels = c("IGHM", "IGHD", "MS4A1", "CD79A", "CD19", "CXCL9", "CCL22",
                                   "LY75", "CD40", "KLF2", "JUN", "FOS", "JUNB", "CLEC12A","IL2RB", "GNLY",
                                   "HAVCR2", "GZMA", "NKG7", "CD74", "HLA-DRB", "CD69", "IL3RA", "CXCL10",
                                   "HLA-DPB1","CSF2RA", "CD274", "S100A10", "CD86","IL1B","IL6", "IL1A", "S100A9",
                                   "S100A8", "CLEC5A", "IFNG","LIF", "LAG3", "CTLA4", "IL2RA",
                                   "CD3D", "CD28","CD4", "IL2","FASN", "ICOS", "CD3E", "CCL19",
                                   "LAMP3", "GAS6", "THBS1", "NELL2", "SELL","TCF7", "RORA", "CD8A","CD8B"))
# Create the heatmap using ggplot2
hm <- ggplot(mtx_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "navy", mid = "white", high = "red", midpoint = 0, name = "expression") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1, color = "black"),
    axis.text.y = element_text(size = 9, color = "black"),
    axis.title = element_blank(),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.grid = element_blank(),
    aspect.ratio = 1/5
  ) +
  coord_flip() +
  labs(x = "", y = "")
  hm
  
pdf("/Users/emanuelepitino/Desktop/stamp_13b/hm.pdf", width = 10)
hm
dev.off()
 
```

```{r}
dir <- glue("{proj_dir}/data/{stamp}/processed")
qsave(sce, file = glue("{dir}/anno_sce_P1.qs"), nthreads = 8)
```

```{r}
sessionInfo()
```
